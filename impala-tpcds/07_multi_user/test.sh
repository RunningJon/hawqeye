#!/bin/bash

set -e

PWD=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $PWD/../functions.sh
source $PWD/../tpcds-env.sh

session_id=$1

if [ "$session_id" == "" ]; then
	echo "Error: you must provide the session id as a parameter."
	echo "Example: ./test.sh 3"
	echo "This will execute the session 3 queries."
	exit 1
fi

step=testing_$session_id

init_log $step

# call external function to get IMP_HOST
get_imp_details

if [ "$SQL_VERSION" != "tpcds" ]; then
	sql_dir=$PWD/$SQL_VERSION/$session_id
else
	sql_dir=$PWD/$session_id
	# going from 1 base to 0 base
	tpcds_id=$((session_id-1))
	tpcds_query_name="query_""$tpcds_id"".sql"
	query_id=1
	for p in $(seq 1 99); do
		q=$(printf %02d $query_id)
		template_filename=query$p.tpl
		start_position=""
		end_position=""
		for pos in $(grep -n $template_filename $sql_dir/$tpcds_query_name | awk -F ':' '{print $1}'); do
			if [ "$start_position" == "" ]; then
				start_position=$pos
			else
				end_position=$pos
			fi
		done

		# Impala can't handle the last lining in a SQL file being a comment so remove.
		end_position=$(($end_position-1))

		# get the query number (the order of query execution) generated by dsqgen
		file_id=$(sed -n "$start_position","$start_position"p $sql_dir/$tpcds_query_name | awk -F ' ' '{print $4}')
		file_id=$(($file_id+100))
		filename=$file_id.query.$q.sql
		sed -n "$start_position","$end_position"p $sql_dir/$tpcds_query_name > $sql_dir/$filename
		query_id=$(($query_id + 1))
		echo "Completed: $sql_dir/$filename"
	done
	echo "rm -f $sql_dir/query_*.sql"
	rm -f $sql_dir/$tpcds_query_name
fi

tuples="0"
for i in $(ls $sql_dir/*.sql); do

	start_log
	id=$i
	schema_name=$session_id
	table_name=$(basename $i | awk -F '.' '{print $3}')

	run_query="1"
	oom_count="0"
	while [ "$run_query" -eq "1" ]; do
		query_log_file="$PWD/../log/test_""$session_id""_""$table_name"".log"
		echo "impala-shell -i $IMP_HOST -d $TPCDS_DBNAME -f $i --quiet"
		impala-shell -i $IMP_HOST -d $TPCDS_DBNAME -f $i --quiet > $query_log_file 2>&1 || true

		# these are known errors that Impala will have under heavy load.  When this happens, retry to run the query
		error_state_store_count=$(grep "Waiting for catalog update from the StateStore" $query_log_file | wc -l)
		error_connect_timeout_count=$(grep "Error connecting: TTransportException" $query_log_file | wc -l)
		error_communicate_impalad_count=$(grep "Error communicating with impalad" $query_log_file | wc -l)
		error_connection_reset_count=$(grep "Socket error 104: Connection reset by peer" $query_log_file | wc -l)
		error_connection_refused_count=$(grep "Connection refused" $query_log_file | wc -l)
		error_unreachable_impalad=$(grep "Cancelled due to unreachable impalad" $query_log_file | wc -l)
		error_syntax=$(grep "ERROR: AnalysisException" $query_log_file | wc -l)
		error_econnreset=$(grep "ECONNRESET" $query_log_file | wc -l)

		# check for any error because there might be one that is not expected
		error_count=$(grep -i error $query_log_file | wc -l)

		# out of memory error happens on some queries and won't finish no matter what.  
		# continue when OOM occurs
		oom_count=$(grep "Memory limit exceeded" $query_log_file | wc -l)

		if [[ "$oom_count" -gt "0" || "$error_syntax" -gt "0" ]]; then
			# query ran but ran out of memory or unsupported syntax.  Don't retry.
			if [ "$oom_count" -gt "0" ]; then
				grep "Memory limit exceeded" $query_log_file
			fi

			if [ "$error_syntax" -gt "0" ]; then
				grep "ERROR: AnalysisException" $query_log_file
			fi

			tuples="0"
			run_query="0"
			log $tuples
		else
			if [[ "$error_state_store_count" -gt "0" || "$error_connect_timeout_count" -gt "0" || "$error_communicate_impalad_count" -gt "0" || "$error_connection_reset_count" -gt "0" || "$error_connection_refused_count" -gt "0" || "$error_unreachable_impalad" -gt "0" || "$error_econnreset" -gt "0" || "$error_count" -gt "0" ]]; then
				# Wait 5 seconds and try again
				# Print the error message and continue
				if [ "$error_state_store_count" -gt "0" ]; then
					grep "Waiting for catalog update from the StateStore" $query_log_file 
				fi

				if [ "$error_connect_timeout_count" -gt "0" ]; then 
					grep "Error connecting: TTransportException" $query_log_file
				fi

				if [ "$error_communicate_impalad_count" -gt "0" ]; then 
					grep "Error communicating with impalad" $query_log_file
				fi

				if [ "$error_connection_reset_count" -gt "0" ]; then 
					grep "Socket error 104: Connection reset by peer" $query_log_file
				fi

				if [ "$error_connection_refused_count" -gt "0" ]; then 
					grep "Connection refused" $query_log_file
				fi

				if [ "$error_unreachable_impalad" -gt "0" ]; then
					grep "Cancelled due to unreachable impalad" $query_log_file
				fi

				if [ "$error_econnreset" -gt "0" ]; then
					grep "ECONNRESET" $query_log_file
				fi

				# check for unexpected errors
				if [[ "$error_state_store_count" -eq "0" && "$error_connect_timeout_count" -eq "0" && "$error_communicate_impalad_count" -eq "0" && "$error_connection_reset_count" -eq "0" && "$error_connection_refused_count" -eq "0" && "$error_unreachable_impalad" -eq "0" && "$error_econnreset" -eq "0" && "$error_count" -gt "0" ]]; then
					echo "Unexpected error!"
					grep -i error $query_log_file
				fi

				# capture the execution time and if too long, then don't retry
				if [ "$OSVERSION" == "Linux" ]; then
					current_t="$(($(date +%s%N)-T))"
					# seconds
					current_s="$((current_t/1000000000))"
				else
					# must be OSX which doesn't have nano-seconds
					current_s="$(($(date +%s)-T))"
				fi

				# give up after hitting the long_running_timeout
				if [ "$current_s" -ge "$LONG_RUNNING_TIMEOUT" ]; then
					echo "Long running timeout exceeded."
					run_query="0"
					tuples="0"
					log $tuples
				else
					run_query="1"
					sleep 5
				fi
			else
				tuples=$(cat $query_log_file | wc -l)
				run_query="0"
				log $tuples
			fi
		fi
	done

done

end_step $step
